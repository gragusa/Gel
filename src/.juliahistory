Pkg.add("Calculus")
Pkg.update()
using Calculus
gradient(x -> sin(x[1]) + cos(x[2]), [0.0, 0.0])
gradient(momfun_, [.02])
df = gradient(momfun_(x))
df = gradient(sum(momfun_(x),2))
sum(momfun_(.2),2)
sum(momfun_([.2]),2)
size(sum(momfun_([.2]),2))
size(sum(momfun_([.2]),1))
df = gradient(sum(momfun_(x),2)[1,1])
df = gradient(sum(momfun_([x]),2)[1,1])
df = gradient(sum(momfun_(x::Vector),2)[1,1])
df = gradient(sum(momfun_(x::Vector),2)[1,1])
Pkg.add("DualNumbers")
Pkg.update("DataFrames")
Pkg.update()
pkg.rm("Stats")
Pkg.rm("Stats")
Pkg.update()
Pkg.add("DualNumbers")
using DualNumbers
f(x) = x^3
x = dual(2, 1)
f(x)
f(2)
f(1)
@time f(1)
Pkg.add("NLsolve")
using NLsolve
momfun_(.2)
momfun_([.2])
x
momfun_([.2])
momfun_(.2)
momfun_([.2])
momfun_([.2, .2])
momfun_([.2 .2])
momfun_([.2, .2])
smomfun([.2,.2])
smomfun([.2,.2])
autodiff(smomfun, [.2,.2])
DualNumbers.autodiff(smomfun, [.2,.2])
using NLsolve
autodiff(smomfun, [.2,.2])
NLsolve.autodiff(smomfun, [.2,.2])
gg = smomfun([.2, .2])
gg = smomfun([.2, .2])
NLsolve.autodiff(smomfun, [.2,.2])
NLsolve.autodiff(smomfun, [.2,.2])
jac = zeros(5,2)
dualin = zeros(0, 5,1)
dualin = zeros(5,1)
dualin = zeros(5)
dualout = zeros(5)
NLsolve.autodiff(smomfun, [.2,.2],jac, dualin, dualout)
Dual(.2, zero(Real))
f([.2,.2], smomfun)
f([.2,.2], smomfun)
f([.2 .2], smomfun)
[.2, .2]
methods(f)
methods(f!)
f!([.2 .2], smomfun)
f!([.2, .2], smomfun)
dual_in = Array(Dual{T},n)
    dual_out = Array(Dual{T},m)
dual_in = Array(Dual{Real},n)
f!([.2,.2])
f!([.2,.2], [0, 0, 0, 0, 0])
methods(f!)
exit()
